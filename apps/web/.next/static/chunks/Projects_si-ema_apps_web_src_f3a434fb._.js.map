{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/kukreja/Projects/si-ema/apps/web/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,mOAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/kukreja/Projects/si-ema/apps/web/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useRouter } from \"next/navigation\";\nimport { User } from \"@/types\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  refreshUser: () => Promise<void>;\n  isAdmin: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  const fetchUser = async () => {\n    const { data } = await supabase.auth.getSession();\n\n    if (!data.session) {\n      setUser(null);\n      setLoading(false);\n      return;\n    }\n\n    const { data: userData } = await supabase.from(\"users\").select(\"*\").eq(\"id\", data.session.user.id).single();\n\n    setUser(userData);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchUser();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\n      if (event === \"SIGNED_OUT\") {\n        setUser(null);\n        router.push(\"/login\");\n      } else if (event === \"SIGNED_IN\") {\n        fetchUser();\n      }\n    });\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, loading, refreshUser: fetchUser, isAdmin: user?.role === \"admin\" }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;;;AAJA;;;;AAcA,MAAM,4BAAc,IAAA,uMAAa,EAA8B;AAExD,SAAS,aAAa,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IAC3B,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,kMAAQ,EAAc;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,kMAAQ,EAAC;IACvC,MAAM,SAAS,IAAA,2KAAS;IAExB,MAAM,YAAY;QAChB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,6KAAQ,CAAC,IAAI,CAAC,UAAU;QAE/C,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,QAAQ;YACR,WAAW;YACX;QACF;QAEA,MAAM,EAAE,MAAM,QAAQ,EAAE,GAAG,MAAM,6KAAQ,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC,KAAK,EAAE,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM;QAEzG,QAAQ;QACR,WAAW;IACb;IAEA,IAAA,mMAAS;kCAAC;YACR;YAEA,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,6KAAQ,CAAC,IAAI,CAAC,iBAAiB;0CAAC,CAAC;oBAC9D,IAAI,UAAU,cAAc;wBAC1B,QAAQ;wBACR,OAAO,IAAI,CAAC;oBACd,OAAO,IAAI,UAAU,aAAa;wBAChC;oBACF;gBACF;;YAEA;0CAAO;oBACL,aAAa,YAAY,CAAC,WAAW;gBACvC;;QACF;iCAAG,EAAE;IAEL,qBACE,sNAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS,aAAa;YAAW,SAAS,CAAA,iBAAA,2BAAA,KAAM,IAAI,MAAK;QAAQ;kBACnG;;;;;;AAGP;GA1CgB;;QAGC,2KAAS;;;KAHV;AA4CT,SAAS;;IACd,MAAM,UAAU,IAAA,oMAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}